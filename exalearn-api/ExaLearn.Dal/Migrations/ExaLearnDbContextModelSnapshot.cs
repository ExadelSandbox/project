// <auto-generated />
using System;
using ExaLearn.Dal.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ExaLearn.Dal.Migrations
{
    [DbContext(typeof(ExaLearnDbContext))]
    partial class ExaLearnDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("ExaLearn.Dal.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "London"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Paris"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Moscow"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Minsk"
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "14"
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "12"
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "16"
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "10"
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "Read"
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Rat"
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Red"
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Road"
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "Swim"
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "Swam"
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = true,
                            QuestionId = 4,
                            Text = "Swum"
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "Slim"
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "are"
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = true,
                            QuestionId = 5,
                            Text = "is"
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "am"
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "he"
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = true,
                            QuestionId = 6,
                            Text = "are"
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "am"
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "they"
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "is"
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "will be"
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "be"
                        },
                        new
                        {
                            Id = 27,
                            IsCorrect = true,
                            QuestionId = 7,
                            Text = "was/were"
                        },
                        new
                        {
                            Id = 28,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "has"
                        },
                        new
                        {
                            Id = 29,
                            IsCorrect = true,
                            QuestionId = 8,
                            Text = "was"
                        },
                        new
                        {
                            Id = 30,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "will be"
                        },
                        new
                        {
                            Id = 31,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "is"
                        },
                        new
                        {
                            Id = 32,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "were"
                        },
                        new
                        {
                            Id = 33,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "will be"
                        },
                        new
                        {
                            Id = 34,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "am"
                        },
                        new
                        {
                            Id = 35,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "are"
                        },
                        new
                        {
                            Id = 36,
                            IsCorrect = true,
                            QuestionId = 9,
                            Text = "is"
                        },
                        new
                        {
                            Id = 37,
                            IsCorrect = true,
                            QuestionId = 10,
                            Text = "Where"
                        },
                        new
                        {
                            Id = 38,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Who"
                        },
                        new
                        {
                            Id = 39,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Which"
                        },
                        new
                        {
                            Id = 40,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "How many"
                        },
                        new
                        {
                            Id = 41,
                            IsCorrect = true,
                            QuestionId = 11,
                            Text = "Cat"
                        },
                        new
                        {
                            Id = 42,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "Dog"
                        },
                        new
                        {
                            Id = 43,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "Cow"
                        },
                        new
                        {
                            Id = 44,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "Goat"
                        },
                        new
                        {
                            Id = 45,
                            IsCorrect = true,
                            QuestionId = 12,
                            Text = "2-16 years"
                        },
                        new
                        {
                            Id = 46,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "1-4 years"
                        },
                        new
                        {
                            Id = 47,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "16-24 years"
                        },
                        new
                        {
                            Id = 48,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "5-10 years"
                        },
                        new
                        {
                            Id = 49,
                            IsCorrect = true,
                            QuestionId = 13,
                            Text = "10-13 years"
                        },
                        new
                        {
                            Id = 50,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "5-10 years"
                        },
                        new
                        {
                            Id = 51,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "2-16 years"
                        },
                        new
                        {
                            Id = 52,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "1-2 years"
                        },
                        new
                        {
                            Id = 53,
                            IsCorrect = true,
                            QuestionId = 14,
                            Text = "Milk"
                        },
                        new
                        {
                            Id = 54,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "Sugar"
                        },
                        new
                        {
                            Id = 55,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "Salt"
                        },
                        new
                        {
                            Id = 56,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "Oil"
                        },
                        new
                        {
                            Id = 57,
                            IsCorrect = true,
                            QuestionId = 15,
                            Text = "Carnivorous"
                        },
                        new
                        {
                            Id = 58,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "Herbivorous"
                        },
                        new
                        {
                            Id = 59,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "Omnivorous"
                        },
                        new
                        {
                            Id = 60,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "Vegeterian"
                        },
                        new
                        {
                            Id = 61,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "Carnivorous"
                        },
                        new
                        {
                            Id = 62,
                            IsCorrect = true,
                            QuestionId = 16,
                            Text = "Herbivorous"
                        },
                        new
                        {
                            Id = 63,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "Omnivorous"
                        },
                        new
                        {
                            Id = 64,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "Vegeterian"
                        },
                        new
                        {
                            Id = 65,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Carnivorous"
                        },
                        new
                        {
                            Id = 66,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Herbivorous"
                        },
                        new
                        {
                            Id = 67,
                            IsCorrect = true,
                            QuestionId = 17,
                            Text = "Omnivorous"
                        },
                        new
                        {
                            Id = 68,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Vegeterian"
                        },
                        new
                        {
                            Id = 69,
                            IsCorrect = true,
                            QuestionId = 18,
                            Text = "115.7 meters"
                        },
                        new
                        {
                            Id = 70,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "110 meters"
                        },
                        new
                        {
                            Id = 71,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "100 meters"
                        },
                        new
                        {
                            Id = 72,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "90 meters"
                        },
                        new
                        {
                            Id = 73,
                            IsCorrect = true,
                            QuestionId = 19,
                            Text = "The Amazon"
                        },
                        new
                        {
                            Id = 74,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "Yakushima Forest"
                        },
                        new
                        {
                            Id = 75,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "Waipoua Forest"
                        },
                        new
                        {
                            Id = 76,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "The Araucaria Forest"
                        },
                        new
                        {
                            Id = 77,
                            IsCorrect = true,
                            QuestionId = 20,
                            Text = "The Pacific Ocean"
                        },
                        new
                        {
                            Id = 78,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "The Atlantic Ocean"
                        },
                        new
                        {
                            Id = 79,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "The Indian Ocean"
                        },
                        new
                        {
                            Id = 80,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "The Arctic Ocean"
                        });
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.AssignTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AssignerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LevelType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignerId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignTests");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PassedTestId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PassedTestId");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.PassedTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("Assessment")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignTestId")
                        .HasColumnType("integer");

                    b.Property<int?>("CheckerId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("LevelType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PassedTestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignTestId");

                    b.HasIndex("CheckerId");

                    b.HasIndex("UserId");

                    b.ToTable("PassedTests");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<int>("LevelType")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "Capital of the England?"
                        },
                        new
                        {
                            Id = 2,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "How many major verb tenses are in english?"
                        },
                        new
                        {
                            Id = 3,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "Second verb form of \"read\"?"
                        },
                        new
                        {
                            Id = 4,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "Third verb form of \"swim\"?"
                        },
                        new
                        {
                            Id = 5,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "Joe ___ a good driver"
                        },
                        new
                        {
                            Id = 6,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "Look! The boys ___ running!"
                        },
                        new
                        {
                            Id = 7,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "\"Be\" verb in past simple"
                        },
                        new
                        {
                            Id = 8,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "I ___ at home yesterday"
                        },
                        new
                        {
                            Id = 9,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "There ___ a one apple left"
                        },
                        new
                        {
                            Id = 10,
                            LevelType = 1,
                            QuestionType = 1,
                            Text = "___ did she go?"
                        },
                        new
                        {
                            Id = 11,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "The most common animal?"
                        },
                        new
                        {
                            Id = 12,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "Cats' lifespan?"
                        },
                        new
                        {
                            Id = 13,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "Dogs' lifespan?"
                        },
                        new
                        {
                            Id = 14,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "The main ingredient of the butter?"
                        },
                        new
                        {
                            Id = 15,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "Wolfs are: "
                        },
                        new
                        {
                            Id = 16,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "Cows are: "
                        },
                        new
                        {
                            Id = 17,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "Humans are: "
                        },
                        new
                        {
                            Id = 18,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "How tall is the tallest tree?"
                        },
                        new
                        {
                            Id = 19,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "The largest forest in the world?"
                        },
                        new
                        {
                            Id = 20,
                            LevelType = 1,
                            QuestionType = 2,
                            Text = "The biggest ocean on the planet?"
                        },
                        new
                        {
                            Id = 21,
                            LevelType = 0,
                            QuestionType = 3,
                            Text = "Lets talk about Great Britain. What do you know about this country?"
                        },
                        new
                        {
                            Id = 22,
                            LevelType = 0,
                            QuestionType = 3,
                            Text = "Can you tell about nature?"
                        },
                        new
                        {
                            Id = 23,
                            LevelType = 0,
                            QuestionType = 3,
                            Text = "Can you tell about summer holidays?"
                        },
                        new
                        {
                            Id = 24,
                            LevelType = 0,
                            QuestionType = 3,
                            Text = "Can you tell about your first friend?"
                        },
                        new
                        {
                            Id = 25,
                            LevelType = 0,
                            QuestionType = 3,
                            Text = "Can you tell about your favorite animal?"
                        });
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("LevelType")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<int>("Assessment")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<int>("PassedTestId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PassedTestId");

                    b.HasIndex("QuestionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.Answer", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.AssignTest", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.User", "Assigner")
                        .WithMany()
                        .HasForeignKey("AssignerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaLearn.Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assigner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.History", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.PassedTest", "PassedTest")
                        .WithMany()
                        .HasForeignKey("PassedTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaLearn.Dal.Entities.User", "User")
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedTest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.PassedTest", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.AssignTest", "AssignTest")
                        .WithMany()
                        .HasForeignKey("AssignTestId");

                    b.HasOne("ExaLearn.Dal.Entities.User", "Checker")
                        .WithMany()
                        .HasForeignKey("CheckerId");

                    b.HasOne("ExaLearn.Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignTest");

                    b.Navigation("Checker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.Report", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.UserAnswer", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.PassedTest", "PassedTest")
                        .WithMany("UserAnswers")
                        .HasForeignKey("PassedTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaLearn.Dal.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedTest");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExaLearn.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ExaLearn.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.PassedTest", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ExaLearn.Dal.Entities.User", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
